module serial_adder (
    input clk,         
    input reset,       
    input A_bit,       
    input B_bit,      
    input Cin,         
    output reg Sum_bit,
    output reg Cout    
);

    reg carry;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            carry <= Cin;     
            Sum_bit <= 0;
            Cout <= 0;
        end else begin
            Sum_bit <= A_bit ^ B_bit ^ carry;  
            carry <= (A_bit & B_bit) | (A_bit & carry) | (B_bit & carry);
            Cout <= carry; 
        end
    end
endmodule




module serial_adder_tb;
    reg clk;
    reg reset;
    reg A_bit, B_bit;
    reg Cin;
    wire Sum_bit;
    wire Cout;

    serial_adder uut (
        .clk(clk),
        .reset(reset),
        .A_bit(A_bit),
        .B_bit(B_bit),
        .Cin(Cin),
        .Sum_bit(Sum_bit),
        .Cout(Cout)
    );

    reg [3:0] A = 4'b0110; // A = 6
    reg [3:0] B = 4'b1011; // B = 11
    reg [3:0] sum_result;
    integer i;
    initial begin
        clk = 0;
        forever #5 clk = ~clk; 
    end

    initial begin
        reset = 1;
        Cin = 0;
        A_bit = 0;
        B_bit = 0;
        sum_result = 0;

        #10;
        reset = 0;

        for (i = 0; i < 4; i = i + 1) begin
            A_bit = A[i];
            B_bit = B[i];
            #10;
            sum_result[i] = Sum_bit;
        end
    end
endmodule

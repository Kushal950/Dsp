module universal_shift_register (
    input clk,
    input reset,
    input [1:0] mode,
    input [3:0] data_in,
    input serial_left,
    input serial_right,
    output reg [3:0] data_out
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            data_out <= 4'b0000;
        else begin
            case (mode)
                2'b00: data_out <= data_out;
                2'b01: data_out <= {data_out[2:0], serial_right};
                2'b10: data_out <= {serial_left, data_out[3:1]};
                2'b11: data_out <= data_in;
            endcase
        end
    end
endmodule






module tb_universal_shift_register;
    reg clk, reset;
    reg [1:0] mode;
    reg [3:0] data_in;
    reg serial_left, serial_right;
    wire [3:0] data_out;

    universal_shift_register uut (
        .clk(clk),
        .reset(reset),
        .mode(mode),
        .data_in(data_in),
        .serial_left(serial_left),
        .serial_right(serial_right),
        .data_out(data_out)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        reset = 1;
        mode = 2'b00;
        data_in = 4'b0000;
        serial_left = 0;
        serial_right = 0;
        #10 reset = 0;

        mode = 2'b11;
        data_in = 4'b1010;
        #10;

        mode = 2'b01;
        serial_right = 1;
        #10;

        serial_right = 0;
        #10;

        mode = 2'b10;
        serial_left = 1;
        #10;

        serial_left = 0;
        #10;

        mode = 2'b00;
        #10;

        $finish;
    end
endmodule

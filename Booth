module booth_multiplier (
    input clk,
    input reset,
    input start,
    input signed [3:0] multiplicand,
    input signed [3:0] multiplier,
    output reg signed [7:0] product,
    output reg done
);
    reg [8:0] P;
    reg [4:0] A, S;
    reg [2:0] count;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            A <= 0;
            S <= 0;
            P <= 0;
            count <= 0;
            product <= 0;
            done <= 0;
        end else if (start) begin
            A <= {multiplicand, 4'b0000};
            S <= {-multiplicand, 4'b0000};
            P <= {4'b0000, multiplier, 1'b0};
            count <= 4;
            done <= 0;
        end else if (count > 0) begin
            case (P[1:0])
                2'b01: P <= P + A;
                2'b10: P <= P + S;
            endcase
            P <= {P[8], P[8:1]};
            count <= count - 1;
            if (count == 1) begin
                product <= P[7:0];
                done <= 1;
            end
        end
    end
endmodule







module tb_booth_multiplier;
    reg clk, reset, start;
    reg signed [3:0] multiplicand, multiplier;
    wire signed [7:0] product;
    wire done;

    booth_multiplier uut (
        .clk(clk),
        .reset(reset),
        .start(start),
        .multiplicand(multiplicand),
        .multiplier(multiplier),
        .product(product),
        .done(done)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        reset = 1;
        start = 0;
        multiplicand = 0;
        multiplier = 0;
        #10 reset = 0;

        multiplicand = 4'd3;
        multiplier = 4'd2;
        start = 1;
        #10 start = 0;
        wait(done);
        #10;

        reset = 1; #10 reset = 0;
        multiplicand = -3;
        multiplier = 2;
        start = 1;
        #10 start = 0;
        wait(done); #10;

        reset = 1; #10 reset = 0;
        multiplicand = -4;
        multiplier = -2;
        start = 1;
        #10 start = 0;
        wait(done); #10;

        $finish
    end
endmodule
